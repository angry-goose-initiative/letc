/**
 * @file    verilator_wrapper.cpp
 * @brief   Wrapper around testbenches to run with Verilator
 * 
 * @copyright
 *  Copyright (C) 2024 John Jekel\n
 * See the LICENSE file at the root of the project for licensing info.
 * 
 * TODO longer description
 *
*/

/* ------------------------------------------------------------------------------------------------
 * Includes and Defines
 * --------------------------------------------------------------------------------------------- */

#include <iostream>
#include <memory>

#include "verilated.h"
#include "verilated_fst_c.h"

#ifndef SV_TBENCH_NAME
#error "When compiling verilator_wrapper.cpp, SV_TBENCH_NAME must be defined"
#endif

//The name of the class that will be generated by verilator
//Doesn't quite work
//#define VERILATED_CLASS V ## SV_TBENCH_NAME
//Do it in make instead
#ifndef VERILATED_CLASS
#error "When compiling verilator_wrapper.cpp, SV_TBENCH_NAME must be defined"
#endif

//The header that will be generated by verilator
//Doesn't quite work
/*
//https://stackoverflow.com/questions/3178946/using-define-to-include-another-file-in-c-c
#define STRINGIZE_AUX(a) #a
#define STRINGIZE(a) STRINGIZE_AUX(a)
#define CAT_AUX(a, b) a##b
#define CAT(a, b) CAT_AUX(a, b)
#define VERILATED_HEADER(name) STRINGIZE(CAT(V, CAT(name,.h)))//Almost works, but we can't concat with a . at the start with the header
#include VERILATED_HEADER(SV_TBENCH_NAME)
*/
//Do it in make instead
#ifndef VERILATED_HEADER
#error "When compiling verilator_wrapper.cpp, VERILATED_HEADER must be defined"
#endif
#define STRINGIZE_AUX(a) #a
#define STRINGIZE(a) STRINGIZE_AUX(a)
#include STRINGIZE(VERILATED_HEADER)

#ifndef WAVES_OUTPUT_PATH
#error "When compiling verilator_wrapper.cpp, WAVES_OUTPUT_PATH must be defined"
#endif

/* ------------------------------------------------------------------------------------------------
 * Static Variables
 * --------------------------------------------------------------------------------------------- */

static double simulation_time = 0.0;//Used to keep track of simulation time for dumping a wave file

/* ------------------------------------------------------------------------------------------------
 * Function Declarations
 * --------------------------------------------------------------------------------------------- */

double sc_time_stamp();//Used by Verilator to keep track of simulation time dumping a wave file

/* ------------------------------------------------------------------------------------------------
 * Function Implementations
 * --------------------------------------------------------------------------------------------- */

int main(int argc, char** argv) {
    std::cout << "\x1b[1mSimulator binary for the \x1b[94m" << STRINGIZE(SV_TBENCH_NAME) <<
        "\x1b[0m\x1b[1m testbench has started...\x1b[0m" << std::endl;

    std::cout << "\x1b[1mDumping waves to \x1b[94m" << STRINGIZE(WAVES_OUTPUT_PATH) << "\x1b[0m" << std::endl;

    //Interpret command line arguments for Verilator
    Verilated::commandArgs(argc, argv);

    //Instantiate the testbench for simulation
    std::unique_ptr<VERILATED_CLASS> testbench(new VERILATED_CLASS);

    //Needed to support dumping waves
    Verilated::traceEverOn(true);
    std::unique_ptr<VerilatedFstC> tfp(new VerilatedFstC);
    testbench->trace(tfp.get(), 999);//Trace 999 levels of hierarchy
    tfp->open(STRINGIZE(WAVES_OUTPUT_PATH));

    //Simulation loop (until $finish)
    while (!Verilated::gotFinish()) {
        testbench->eval();//Update simulation
        tfp->dump(simulation_time);//Dump wave file
        simulation_time += 1.0;//Increment time counter
    }

    //Close the wave file

    std::cout << "\x1b[1mSimulator binary for the \x1b[94m" << STRINGIZE(SV_TBENCH_NAME) <<
        "\x1b[0m\x1b[1m testbench has finished...\x1b[0m" << std::endl;

    return 0;
}

double sc_time_stamp() {//Callback used by Verilator for dumping (it expects this symbol)
    return simulation_time;
}
